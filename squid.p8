pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
 -- main functions
// project squidgame
// by sam france, frank bubbico
//
// date created ~ sept. 2024
//
// tab 0 contains:
// - all main functions
//   (init, update, draw)


// initialize all objects and
// objectpools
function _init()
 cls()
 coroutines = {}
	hitboxes = {}
	objectpool = {}
	
	make_player()
	
	testenmy = make_enemy1(60,96, 50, player)
	//makenpc()
	
	//explosions = {}
	
 global_faces = {
	[0] = {-1,-1,-6,4,.5,.5,4,4,2,-2,.5,.5,.25},
 [1] = {0,-1,-2,-4,0,1,4,4,2,0,1,.5,.2},
 [2] = {1,-1,4,-6,.5,.5,4,4,2,2,.5,.5,.25},
	[3] = {-1,0,-4,10,1,0,4,4,0,-2,.5,1,.25},
	[4] = {1,0,12,-2,1,0,4,4,0,2,.5,1,.25},
	[5] = {-1,1,4,14,.5,.5,4,4,-2,-2,.5,.5,.25},
	[6] = {0,1,10,12,0,1,4,4,-2,0,1,.5,.25},
	[7] = {1,1,14,4,.5,.5,4,4,-2,2,.5,.5,.25} }
	
	// global inventory flags? maybe?
	global_items = {
	["bombs"] = {use = use_bomb},
	["bow"] = {use = use_bow},
	["sword"] = {use = sword}
	}
	
	//levels
	levels = {
	["testing"] = {b03062a010303012b06060103030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000031515150303030303030303030303060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060603030303010303050409030303030606031a030809030303030101010103030000000000000000000000000000000000000000000000000000000000000000031515030315030303030303030303060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060603010303030303033a050d0303030606030804070fb0c0c05040903030804070807030303030303030303030301030303330303010000000000000000000000000000000000000000000000000000000000000000030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060c0b080404070303050404070303030303030303030303030103030303030301000000000000000000000000000000000000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306080407030303030303033b010303030810040dc06151515000000000000010000060000000000000000000000000000000003030303030303030303030303030306060303030303030303030303030303030303030308040d0317040409030303030303031f1f1f1f1f1f1f03030303030303030303030303030303030303030303030303030303030303030303030303030615061515150000000000000000010600000000000000000000000000000000030303030303030303030303030303060603030303031f1e1f1e1f0303030303030303030601010101010106030303030303031f30303030301f03030303030303030303030303030303030303030303030303030303030303030303030303030615061515150000000000000000000600000000000000000000000000000000030303030303030303030303030303060603030303031f0319031f030303030303030303060101010101010f030303030303031f30303030301f03030303030303030303030303030303030303030303030303030303030303030303030303030509061515000000000000000000000600000000000000000000000000000000030303030303030303030303030303060603030303031f0303031f0303030303030303030f01010101010103030303030303031f30303030301f03030303030303030303030303030303030303030303030303030303030303030303030303030816071500003939393900000000000600000000000000000000000000000000030303030303030303030303030303060603030303031f1e1d1e1f030303030303030303030101013401010e030303030303031f30303030301f030303030303030303030303030303030303030303030303030303030303030303030303030306000000000039393939000000000006000000000000000000000000000000000303030303030303030303030303030606030303030303030303030303030303030303030e01010101010106030303030303031f1f1f2f1f1f1f03030303030303030303030303030303030303030303030303030303030303030303030303030600000000003939393900000000000600000000000000000000000000000000030303030303030303030303030303060603030303030303030303030303030303030303060101010101010603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060000000000393939390000000008070000000000000000000000000000000003030303030303030303030303030306060303030303030303030303030303030303031b0504040d031704070303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306000e010000000000000000000816090000000000000000000000000000000003030303030303030303030303030306060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010601010000000000000000060b060000000000000000000000000000000003030303030303030303030303030306060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010601010000000000000000060e060000000000000000000000000000000003030303030303030303030303030306060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010504040900000000000804070f0600000000000000000000000000000000030303030303030303030303030303060603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060101010b0509000000000608170d06000000000000000000000000000000000303030303030303030303030303030606030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030617040d0b0b0600000804070b0b0c0600000000000000000000000000000000030303030303030303030303030303060603030303030303030303030303030303030303030303030303030303030303080dfe0000000000000e{128, 131, 0, 132, 131, 133, 134, 7, 138, 9, 10, 11, 140, 13, 14, 15}, 11, 110, 60, 1},
	["firstcave"] = {16,32, "0804041004040404040404040404040906150807151500000000000001141406060c06151515000000000000010000060615061515150000000000000000010606150615151500000000000000000006050906151500000000000000000000060816071500003939393900000000000606000000000039393939000000000006060000000000393939390000000000060600000000003939393900000000080706000e0100000000000000000008160906010601010000000000000000060b0606010601010000000000000000060e0606010504040900000000000804070f06060101010b0509000000000608170d060617040d0b0b0600000804070b0b0c06080d0017040409000004040404040409061515001a01060000000000000000060615000000000509000000000000000606000000393939060000000000000006060000003939390600000000000000060600000039390006000000000000000606010000000000060000000000000006050409010108040700000000000000060804070101050409000000000000000606000000000000060000000000000006060000000000000f141400000000000601000000000000011400000000000006000000000000141400000000000000060e0000000000000e00000000000000060600000000000006000000000000000605040404090008070404040404040407", {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}, 13, 48,48, 13}
	}
	
	level_slots = {
	["loaded"] = "overworld",
	["pallete"] = {1,2,3,4,5,6,7,8,9,10,132,12,13,14,15,0},
	["curmusic"] =11,
	["prevmusic"] = 0,
	["background"] = 0
	}
	
	menuitem(1,"inventory", openinv)
	menuitem(2,"save game", opensaveprompt)
end

// routine updates every frame
// using designed update funcs.
function _update()
	//get_mapdata(80,16,16,32) 
	initialmenu()
	foreach(objectpool,type_update)
	
	foreach(coroutines, update_coroutine)

	foreach(objectpool,update_object)
	foreach(hitboxes, update_hitbox)
	
	//foreach(coroutines, update_coroutine)

	if (xest(player.x/8) == 1 and xest(player.y/8) == 1 and level_slots["loaded"] == "overworld") then
	 load_level("testing")
	end
	if (xest(player.x/8) == 7 and xest(player.y/8) == 1 and level_slots["loaded"] == "testing") then
	 load_level("firstcave")
	end
	if (level_slots["prevmusic"] != level_slots["curmusic"]) then
		music(level_slots["curmusic"])
		level_slots["prevmusic"] = level_slots["curmusic"]
	end
end


function type_update(obj)
	--type-specific update
	if(obj.update != nil) then
		obj.update(obj)
	end
end


function update_object(obj)
	if obj.isalive == false then
	 del(objectpool, obj)
		del(hitboxes, obj.hb)
	end
	
	//i moved this to it's own func^^
	//for sequencing reasons
	--[[
	--type-specific update
	if(obj.update != nil) then
		obj.update(obj)
	end
	--]]
	
	--track lifetime
	--lifetime based on hp
	if obj.hp <= 0 then
		obj.duration = 0
	end
	
	--lifetime based on duration
	if obj.duration > 0 then
		obj.duration -= 1
	--lifetime based on parent
	elseif obj.duration == -2 then
		if obj.parent != nil then
			if obj.parent.isalive == false then
				//delete
				obj.duration = 0
			end
		end
	elseif obj.duration == 0 then
		obj.isalive = false
	end
	
	--[[
	--prevent solid objects from entering walls
	if obj.hb!=nil and obj.hb.issolid then
		--left collision
		if obj.dx<0 and 0 < #searchmapcols(obj.hb, 0b1, 0,1, -(obj.hb.right-obj.hb.left),-1) then
			obj.dx = 0
		end
		--right collision
		if obj.dx>0 and 0 < #searchmapcols(obj.hb, 0b1, (obj.hb.right-obj.hb.left),1, 0,-1) then
			obj.dx = 0
		end
		--up collision
		if obj.dy<0 and 0 < #searchmapcols(obj.hb, 0b1, 1,0, -1,-(obj.hb.bot-obj.hb.top)) then
			obj.dy = 0
		end
		--down collision
		if obj.dy>0 and 0 < #searchmapcols(obj.hb, 0b1, 1,(obj.hb.bot-obj.hb.top), -1,0) then
			obj.dy = 0
		end
		
	end
	--]]
	
	---[[
	//new new new
	--prevent solid objects from entering walls
	if obj.hb!=nil and obj.hb.issolid then
		
		--left collision			
		while obj.dx<0 and 0 < #searchmapcols(obj.hb, 0b1, 2+obj.dx,1, -(obj.hb.right-obj.hb.left),-1) do
			//obj.dx += 1
			obj.dx = mid(obj.dx+1,0,-100000)
		end
		--right collision
		while obj.dx>0 and 0 < #searchmapcols(obj.hb, 0b1, (obj.hb.right-obj.hb.left),1, -1+obj.dx,-1) do
			//obj.dx -= 1
			obj.dx = mid(obj.dx-1,0,100000)
		end
		--up collision
		while obj.dy<0 and 0 < #searchmapcols(obj.hb, 0b1, 1,2+obj.dy, -1,-(obj.hb.bot-obj.hb.top)) do
			//obj.dy += 1
			obj.dy = mid(obj.dy+1,0,-100000)
		end
		--down collision
		while obj.dy>0 and 0 < #searchmapcols(obj.hb, 0b1, 1,(obj.hb.bot-obj.hb.top), -1,-1+obj.dy) do
			//obj.dy -= 1
			obj.dy = mid(obj.dy-1,0,100000)
		end
		
	end
	
	
	--movement
	obj.x += obj.dx
	obj.y += obj.dy
	
	if obj.parent != nil and obj.isglobal == false then
		obj.xoff += obj.dx
		obj.yoff += obj.dy
		
		obj.x += obj.parent.dx
		obj.y += obj.parent.dy
	end
	
	--update position
	obj.mapposx, obj.mapposy = map_pos(obj.x,obj.y)
	obj.mapcellx, obj.mapcelly = map_cell(obj.x+4,obj.y+4)	
	
end

function update_coroutine(cr)
	if not coresume(cr) then
		del(coroutines,cr)
	end
end


// routine updates every frame
// using designed update funcs.
function _draw()
	cls(level_slots["background"])
	bomb_animation()
	draw_map()
	
	foreach(objectpool,draw_object)
	foreach(hitboxes, draw_hitbox)
	
	pal(make_kv(16,level_slots["pallete"]))
	
	print(player.dx)
	print(player.dy)
	
	--[[
	print(flr(player.x))
	print(flr(player.y))
	local pos = {x=flr(player.x),y=flr(player.y)}
	local idx =vectoidx(pos)
	print(idx)
	local point = idxtovec(idx)
	print(point.x)
	print(point.y)
	--]]
	
	--local vec = {x=flr(player.x),y=flr(player.y)}
	--local idx = vectoidx(vec)
	--print(idx)
	--print(flr(idxtopoint(idx).x))
	--print(flr(idxtopoint(idx).y))
	
 //print(testenmy.hp)
	//print(#coroutines)
	
	//local mapx,mapy = map_cell(player.x+2,player.y+2)
	//draw_path(astar(mapx,mapy, 8,12))
	
end

function draw_object(obj)
	if (player.mapposx == obj.mapposx and player.mapposy == obj.mapposy) then
		--type-specific draw function
		if(obj.draw != nil) then
			obj.draw(obj)
		--generic sprite draw
		elseif obj.sprite != nil then
	   spr(obj.sprite,flr(obj.x)%128,flr(obj.y)%128)
		end
	end
end

//empty function
//do not put anything here
function empty()
	//do not!!
end
-->8
-- player info
// the collions function, and
// map info/functions
//
// make player
//
// make player generates our
// player when called in _init
// it contains a ton of info 
// that we're gonna use

function make_player()
	player = add_object(300,60,
																				0,0,
																				-2,
																				1000, //hp
																				nil,true,
																				2,
																				update_player,
																				draw_player)
	player.diag = false
	player.prev_face = 0
 player.face = 6
 player.interaction = false
 // player items
 player.itempool = {
  ["bow"] = {42, 0, 0},
 	["ice boots"] = {43, 0}, 
 	["satchel"] = {58, 0 },
 	["magnet"] = {17, 0, false},
 	["sword"] = {59, 0} }
 player.resources = {
  ["bombs"] = {0, 0},
  ["keys"] = {0},
  ["arrows"] = {0},
  ["money"] = {0} }
 player.slots = {
  [1] = "none",
  [2] = "none",
  [3] = "none"
 }
 player.working_inventory = {}
 player.slotflag = 0
	player.invis = false
	--player hurtbox, tag = 0
 player.hb = add_hitbox(0, 4,4, 6,6, -1, true, 0, 0,0,0, player_oncollision, player_onmapcollision, player)
end

// move player
//
// move player is self explanatory
// the function uses our mapcollions
// function (tab 9)
// to restrict movement against
// walls and objects with the
// flag #0.

function move_player()
	// initialize dx, dy and diag
	player.dx = 0
	player.dy = 0
	player.diag = false
	
	if (btn(0)  )then
  player.dx-=1.001
	end
	if (btn(1)  )then
  player.dx+=1.001
	end
	if (btn(2)  )then
  player.dy-=1.001
	end
	if (btn(3)  )then
  player.dy+=1.001
	end
	
	// diagonal check
	if (player.dx*player.dy != 0) then
  // roughly normalize movement
  // values. using .75 here for
  // fluidity and smoothness.
  //player.dx*=.707
  //player.dy*=.707
  // set diag to true
  player.diag = true
	end
	
	// smoothness functions for
	// diagonal movement. these set
	// x and y to the center of each
	// pixel. only happens on first
	// frame of diag movement.
	
	if (player.diag) then //  and not (player.face != player.prev_face)) then
  player.x = flr(player.x)+0.5
  player.y = flr(player.y)+0.5
 end
	
	// set new previous face for
	// the next frame
 player.prev_face = player.face
	// end!
end

// update player
//
// update player does a variety
// of things, including use items,
// update map position, and move
// the player when called

function update_player(p)
	--update player face direction
	
 local prev = p.face
	
	if btn(1) then
		p.face = 5
	elseif btn(0) then
		p.face = 3
	else
		p.face = 4
	end
	
	if btn(3) then
		p.face +=3
	elseif btn(2) then
	 p.face -=3
	end
	
	if p.face == 4 then
		p.face = prev
	elseif p.face >4 then
		p.face -=1
	end
	

	
	--update mappos
	//player.mapposx, player.mapposy = map_pos(player.x,player.y)	

	p.interaction = false
	p.action = false
	if ( btnp(5)) then
		interact(p.face)
		if ( p.interaction==false ) then
	  use_item_in_slot(1)
 	end
 end
 
 //sword
	if(btnp(4)) then
		use_item_in_slot(2)
	end
	
	if (btnp(0,1) ) then
		use_item_in_slot(3)
	end
	
	--process input, update world pos
	// called from above
	move_player()
end

// draw player
//
// draws player

function draw_player()
 local table = {
 [6] = {2},
 [1] = {35},
 [7] = {37},
 [5] = {38},
 [2] = {34},
 [0] = {36}, 
 [3] = {33}, 
 [4] = {32} }
 for k,v in pairs(table) do
		if player.face == k then
		 player.sprite = v[1]
		end
	end
	if (player.invis) then
		player.sprite = 3
	end	
	
	palt(0, false)
	palt(1, true)
	spr(player.sprite, player.x%128, player.y%128)
	pal()
end


function player_oncollision(playerhb, otherhb)
	//add hb collision behavior here

end

function player_onmapcollision(playerhb)
	//add hb+map collision behavior here!!
	
end


function use_item_in_slot(num)
	for k,v in pairs(global_items) do
	 if (k == player.slots[num]) then
	 	global_items[k].use()
	 end
 end
end

function use_bomb()
 if (player.resources.bombs[1]>0 ) then
  add_bomb(player.x,player.y)
  player.resources.bombs[1] -= 1
	end
end

function use_bow()
	if (player.itempool.bow[2] >= 1 and player.resources.arrows[1] > 0) then
	 add_arrow(player)
		player.resources.arrows[1] -= 1
	end
end	

-->8
-- npcs

function make_enemy1(x,y, hp, target)
	enemy = add_object(x,y,
																				1,1,
																				-2,
																				hp,
																				nil,
																				true,
																				44,
																				update_enemy1,
																				nil)
	
	//target player by default
	enemy.target = player
	

	enemy.hb = add_hitbox(5,
																							4,4, //middle offset
																							6, //length
																							6,	//height
																							-1,
																							true,
																							50,
																							0,0,5,
																							enm1_oncollision, //add oncollision function
																							nil, //onmapcollision function
																							enemy)
	
	enemy.hp = hp


	add(enemies, enemy)
	return enemy
end


function update_enemy1(enm1)
	
	local path = astar(enm1.mapcellx,enm1.mapcelly,
														enm1.target.mapcellx,enm1.target.mapcelly)
	
	if path != nil then
		if #path <= 1 then
			move_toward(enm1, enm1.target.x,enm1.target.y, .5)
		else
			local pointx,pointy = map_coord(path[1].x, path[1].y)
			move_toward(enm1, pointx,pointy, .5)
		end
	else --add idle behavior here
		enm1.dx = 0
		enm1.dy = 0
	end
	
	--set attack kb
	enm1.hb.kbx = (4*enm1.dx) + sgn(enm1.dx)
	enm1.hb.kby = (4*enm1.dy) + sgn(enm1.dy)
	
end

//move obj toward x,y world coord
function move_toward(obj, x,y, speed)
	if x-obj.x != 0 then
		obj.dx = sgn(x-obj.x) * speed
	else
		obj.dx = 0
	end
	
	if y-obj.y != 0 then
		obj.dy = sgn(y-obj.y) * speed
	else
		obj.dy = 0
	end
	
end


function enm1_oncollision(enm1hb, otherhb)
	--player collision
	if otherhb.tag == 0 then
		//calc direction
		local kbx = (otherhb.x-enm1hb.x)/4
		local kby = (otherhb.y-enm1hb.y)/4
		//knock player back
		knockback(otherhb.parent,kbx,kby, enm1hb.kbduration)
		
		knockback(enm1hb.parent,-kbx,-kby,2)
		
	end
	
end


function knockback(
obj,dx,dy, duration)
  
  local c = cocreate(function()
    local initdx = obj.dx
  		local initdy = obj.dy
    
    for i=1,duration do
     if dx != 0 then
     	obj.dx = dx
     end
     if dy != 0 then
     	obj.dy = dy
     end
     
     yield()
    end
    
   	obj.dx = initdx
   	obj.dy = initdy
  end)
  
  add(coroutines,c)
end
-->8
-- particle effects

--particle system prefabs:
---explosion: add_partsys(x,y,1,1, 2,5, 0,0, 2,2, 0.0625)
---sword swipe: add_partsys(x,y,0,1, 4, 4, 2,0, 1,.5, 0.25)


--creates a particle system
function add_partsys(x,y,
																					xrange,
																					yrange,
																					sduration,
																					pduration,
																					dx,dy,
																					dxrange,
																					dyrange,
																					freq,
																					parent,
																					isglobal,
																					partisglobal,
																					hb)
	
	local partsys = add_object(x,y,
																											0,0,
																											sduration,
																											1,
																											parent,
																											isglobal,
																											nil,
																											update_partsys,
																											draw_partsys
																											)
																											
	partsys.partisglobal = partisglobal
	
	partsys.partdx = dx
	partsys.partdy = dy
	

	--range of spawn position
	--variation for particles:
	--x +- xrange, y +- yrange
	partsys.xrange = xrange
	partsys.yrange = yrange
	
	--time until particles despawn
	partsys.pduration = pduration
 --speed / direction range of particles
 partsys.dxrange = dxrange
 partsys.dyrange = dyrange
 --frequency of particle spawns
 --spawns every freq frames
 partsys.freq =freq
	
	
	if hb != nil then
		partsys.hb = hb
		--hb.parent = partsys
	end
	
end


function update_partsys(partsys)
	
	local offset = {}
	if partsys.parent == nil then
		offset.x = partsys.x
		offset.y = partsys.y
	else
		offset.x = partsys.xoff
		offset.y = partsys.yoff
	end
		
	--spawn particle
	if partsys.freq <=1 then
		for i=0, 1/partsys.freq do
			add_particle(offset.x,//-partsys.xrange + rnd(partsys.xrange*2),
																offset.y,//-partsys.yrange + rnd(partsys.yrange*2),
																partsys.pduration,
																partsys.partdx-partsys.dxrange + rnd(partsys.dxrange*2),
																partsys.partdy-partsys.dyrange + rnd(partsys.dyrange*2),
																partsys.parent,
																partsys.partisglobal,
																partsys.hb)
		end
	elseif partsys.duration % partsys.freq == 0 then
		add_particle(offset.x-partsys.xrange + rnd(partsys.xrange*2),
															offset.y-partsys.yrange + rnd(partsys.yrange*2),
															partsys.pduration,
															partsys.partdx-partsys.dxrange + rnd(partsys.dxrange*2),
															partsys.partdy-partsys.dyrange + rnd(partsys.dyrange*2),
															partsys.parent,
															partsys.partisglobal,
															partsys.hb)
	end
	
	
	
end


//debugging partsys position
function draw_partsys(partsys)	
	//pset(partsys.x%128, partsys.y%128, 14)
end

--creates a single particle
--from particle system
function add_particle(x,y,
																						duration,
																						dx,dy,
																						parent,
																						isglobal,
																						hb)
	
	part = add_object(x,y,
																			dx,dy,
																			duration,
																			1,
																			parent,
																			isglobal,
																			nil,
																			nil,
																			draw_particle)
	
	if hb != nil then
		part.hb = add_hitbox(hb.tag,
																					hb.x,hb.y,
																					hb.xlen,
																					hb.ylen,
																					-1,
																					hb.issolid,
																					hb.damage,
																					hb.kbx,hb.kby,
																					hb.kbduration,
																					hb.oncollision,
																					hb.onmapcollision,
																					part)
	end
	
end


function draw_particle(part)
	pset(part.x%128, part.y%128, 7)
end
-->8
-- bombs
// tab 4 handles bomb functions
// and potenitally other future
// item functions
//
// add_bomb
// 
// adds a bomb upon call to 
// the bomb table (called in 
// update player) with contained
// information for further use

function add_bomb(x,y)
																		
	local bomb = add_object(x,y,
																									0,0,
																									100,
																									1000000,
																									nil,true,
																									18,
																									update_bomb)
	local input_face = player.face
	
	set_movement_from_face(bomb,input_face,0)
	
	bomb.hb = add_hitbox(2,4,5,5,5,-1, false, 0, 0,0,0, bomb_oncollision, nil, bomb)

end

// update_bomb
function update_bomb(bomb)
	if (bomb.isalive == false) then
	 explode(bomb)
	end
end

function explode(bomb)
	add_partsys(bomb.x+4,bomb.y+4,1,1, 2,5, 0,0, 2,2, 0.0625)
 
 //hb damage hitbox larger
 add_hitbox(1,
 											bomb.x+4,bomb.y+4,
 											24,24,
 											3,
 											false,
 											50,
 											0,0,2,
 											explo_oncollision,
 											nil)
 
 //mapcell demo hitbox smaller
 add_hitbox(1,
 											bomb.x+4,bomb.y+4,
 											16,16,
 											3,
 											false,
 											17,
 											0,0,2,
 											nil,
 											explo_onmapcollision) 
end


function explode_tile(point)
	mset(point.x,point.y, 20)
end

//bomb oncollision() function
function bomb_oncollision(bombhb, otherhb)
 	--arrows collision
	 if (otherhb.tag == 1 and otherhb.parent != nil ) then
		 //match speed to arrow
		 bombhb.parent.dx = otherhb.parent.dx
		 bombhb.parent.dy = otherhb.parent.dy
		 
		 //explode if arrow is gone
		 if bombhb.parent.duration < otherhb.parent.duration then
		  otherhb.parent.duration = bombhb.parent.duration
		 end

		end
		--[[
	 --sword collision
	 elseif (otherhb.tag == 4 and otherhb.parent != nil) then
	 	bombhb.parent.dx = global_faces[player.face][1]
	 	bombhb.parent.dy = global_faces[player.face][2]
	 
	 end
	 --]]
	 
	 //add other collision behavior here
end


function explo_oncollision(explohb, otherhb)
	//behavior for explosion hb colliding
	if otherhb.parent != nil then
		//calc direction
		local kbx = mid(otherhb.x-explohb.x, -3,3)
		local kby = mid(otherhb.y-explohb.y, -3,3)
		knockback(otherhb.parent,kbx,kby, explohb.kbduration)
	end

end

function explo_onmapcollision(explohb)
	//explode tiles with flag 0b01
	foreach(searchmapcols(explohb, 0b10, 0, 0, 0, 0), explode_tile)
end
-->8
-- levels and map

function load_level(level_name)
	set_mapdata(0,0,levels[level_name][1],levels[level_name][2],levels[level_name][3])
 level_slots["loaded"] = level_name
 level_slots["pallete"] = levels[level_name][4]
	level_slots["curmusic"] = levels[level_name][5]
	level_slots["background"] = levels[level_name][8]
	player.x = levels[level_name][6]
 player.y = levels[level_name][7]
end

--copy mapdata string to clipboard
function get_mapdata(x,y,w,h)
	local reserve=""
	for i=0,w*h-1 do
		reserve..=num2hex(mget(x+i%w,y+i\w))
	end
	printh(reserve,"@clip")
end

--convert mapdata to memory data
function num2hex(v)
	return sub(tostr(v,true),5,6)
end

--replace mapdata with hex
function set_mapdata(x,y,w,h,data)
	for i=1,#data,2 do
		mset(x+i\2%w,y+i\2\w,"0x"..sub(data,i,i+1))
	end
end
-->8
-- menu(inventory) code
function initialmenu()
 if (btnp(6) ) then
  closeinv(b)
  return true
 end
end

function openinv(b)
 clearmenu()
		menuitem(1,"close inventory", closeinv)
 	menuitem(2," slot 1 - "..player.slots[1], function() setslotflag(1) openslot(b) return true end )
 	menuitem(3," slot 2 - "..player.slots[2], function() setslotflag(2) openslot(b) return true end )
 	menuitem(4," slot 3 - "..player.slots[3], function() setslotflag(3) openslot(b) return true end )
  menuitem(5," stats and info "  )
 return true
end

function closeinv(b)
	clearmenu() 
	player.slotflag = 0
	menuitem(1, "inventory",openinv)
	menuitem(2, "save game", opensaveprompt)
	return true
end

function setslotflag(x)
 player.slotflag = x
 return true
end

function openslot(b)
	clearmenu()
		menuitem(1, "exit slot "..player.slotflag, openinv )
		displayitemtwo(1,player.working_inventory)
		displayitemtwo(2,player.working_inventory)
		displayitemtwo(3,player.working_inventory)
		menuitem(5, "next page ->", nextslotpage)
	return true
end

function nextslotpage(b)
	clearmenu()
		menuitem(1, "exit slot "..player.slotflag, openinv )
		displayitemtwo(4,player.working_inventory)
		displayitemtwo(5,player.working_inventory)
		menuitem(4, "<- prev page",openslot)
	return true
end

function opensaveprompt(b)
 clearmenu() 
 	menuitem(1, "are you sure you")
 	menuitem(2, "want to save?")
 	menuitem(3, " yes")
 	menuitem(4, " no", closeinv)
	return true
end

function clearmenu()
	for i = 1,5,1 do
		menuitem(i)
	end
	return true
end

function additemtoslot(x)
 for i = 1,3,1 do
  if (player.slotflag == i) then
   player.slots[i] = player.working_inventory[x]
 	end
 end
end

function displayitemtwo(x,table)
	if (table[x] == nil) then
		menuitem((x%4)+1, "empty")
	else
		menuitem((x%4)+1, ""..table[x],function() additemtoslot(x) displayitemtwo(x,table) return true end)	
	end
	return true
end
-->8
-- player interaction functions

--[[
interactions range from opening
chests/doors to picking up items,
and the like. all code here 
utilizes the global_faces table
which has a set of parameters to
determine which map cell the 
player is directly looking at/
will interact with.
--]]

// interaction process
function interact(face)
	for k,v in pairs(global_faces) do
		if face == k then
			update_chest(xest(player.x/8),xest(player.y/8),v[1],v[2])
			update_door(xest(player.x/8),xest(player.y/8),v[1],v[2])
		end
	end
	pickup_item(face)	
	//npcfuncwhendone(face)
end

// this function updates the
// state of the chest and returns
// items to the player.
function update_chest(xtemp,ytemp,xpm,ypm)
	local contentflag = false
	local loopflag = false
	local loot_table = {
	["bombs"] = {1,5},
	["keys"] = {2,1},
	["arrows"] = {3,20} }
 contentflag = fget(mget((xtemp+xpm),(ytemp+ypm)), 5)
 if ( contentflag == true) then
  for k,v in pairs(loot_table) do
   loopflag = fget(mget((xtemp+xpm),(ytemp+ypm)),v[1])
  	if loopflag == true then
  		for i,j in pairs(player.resources) do
  			if (k == i) then
  			 player.interaction = true
  			 sfx(8)
  			 mset((xtemp+xpm),(ytemp+ypm),24)
  			 j[1] += v[2]
  			 if (k=="bombs") then
  			  if (not contains(player.working_inventory,"bombs")) then
  			 	 add(player.working_inventory,"bombs")
  			 	end
  			 end
  			end	
  		end
  	end	
  end
 end
end

// updates the state of the door
// and removes the players key
function update_door(xtemp,ytemp,xpm, ypm)
 local contentflag = false
 contentflag = fget(mget((xtemp+xpm),(ytemp+ypm)), 2)
		if (contentflag == true and player.resources.keys[1] > 0) then
				player.interaction = true
			 player.resources.keys[1] -= 1
			 sfx(9)
  		mset((xtemp+xpm),(ytemp+ypm),0)
		end
end

// picks up player inventory 
// items which are meant to lie
// static on the map.	can be 
// utilized post acquisition
function pickup_item(face) 
	local xpm, ypm
	for k, v in pairs(global_faces) do
		if face == k then
		 local temp = mget(xest(player.x/8+v[1]),xest(player.y/8+v[2]))
			for i,j in pairs(player.itempool) do
				if temp == j[1] then
		 		player.interaction = true
	 			j[2] += 1
		 			
	 		 if (i != "ice boots") then
	 			 if (not contains(player.working_inventory,i)) then
	 			  add(player.working_inventory,i)
	 			 end
	 			end  
	 			if (i == "bow") then
	 				j[1] = 52
	 			end
	 			
	 			mset(xest(player.x/8+v[1]),xest(player.y/8+v[2]),0)
				end
			end
		end
	end
end
-->8
-- sword

// sword()
// draws sword swing
// creates hitbox
function sword()
		for k,v in pairs(global_faces) do
			if player.face == k then
				//lunge test
				//knockback(player, 3*v[1],3*v[2], 4)
				
				//sword particle + hitbox					
				add_partsys(v[3],v[4], v[5],v[6], v[7], v[8], v[9],v[10], v[11],v[12],v[13], player, false, false,
					add_hitbox(4, 0, 0, 0,0, 0, false, 1, 2*v[1],2*v[2],4, sword_oncollision, sword_onmapcollision))
			
			end
		end
end

function sword_oncollision(swordhb, otherhb)
	
end

function sword_onmapcollision(swordhb)

end
-->8
-- optimizations and development functions
// cook any other code opt.

function xest(x)
	return flr(x+0.5)
end

function bomb_animation()
	if (sget(22,8) == 8) then
		sset(22,8,6)
	else
		sset(22,8,8)
	end
end

function make_kv(size,input)
 local tbl = {}
 for i = 1,size,1 do
 	tbl[i] = input[i]
 end
 return tbl
end
// draw map
//
// draws map

function draw_map()
	map(player.mapposx * 16,player.mapposy * 16,0,0,16,16)
end


function searchmapcols(hb, flags, tlxoff,tlyoff, brxoff,bryoff)
	local tleftx, tlefty = map_cell(hb.left-1 +tlxoff,hb.top-1 +tlyoff)
	local brightx, brighty = map_cell(hb.right+1 +brxoff,hb.bot+1 +bryoff)
	
	local results = {}
	
	for x=tleftx, brightx, 1 do
		for y=tlefty, brighty, 1 do
			if (flags & fget(mget(x,y))) == flags then
				local point = {x=x, y=y}
				add(results, point)
				--return true
			end
		end
	end
	
	return results
end


function add_hitbox(tag,
																				x,y, //position
																				xlen, //length
																				ylen,	//height
																				duration,
																				issolid,
																				damage,
																				kbx,
																				kby,
																				kbduration,
																				oncolfunc, //oncollision function
																				onmapcolfunc, //onmapcollision function
																				parent)
	hitbox = {}
	
	hitbox.tag = tag
	hitbox.x = x
	hitbox.y = y
	hitbox.xlen = xlen
	hitbox.ylen = ylen
	
	hitbox.issolid = issolid
	
	--lifetime of hb
	---set duration = -1
	---for parent-based lifetime
	hitbox.duration = duration
	
	hitbox.damage = damage
	hitbox.kbx = kbx
	hitbox.kby = kby
	hitbox.kbduration = kbduration
	
	//oncollision() function
	if oncolfunc != nil then
		//runs on all currently colliding hbs
		hitbox.oncollision = oncolfunc
	end
	if onmapcolfunc != nil then
		//runs on all currently colliding map cells
		hitbox.onmapcollision = onmapcolfunc
	end
	
	local mapx = (hitbox.x-(hitbox.x%8))/8
	local mapy = (hitbox.y-(hitbox.y%8))/8
	hitbox.mapposx = (mapx-(mapx%16)) / 16
	hitbox.mapposy = (mapy-(mapy%16)) / 16
	
	if parent != nil then
		hitbox.parent = parent
		hitbox.mapposx = parent.mapposx
		hitbox.mapposy = parent.mapposy
		
		--hb pos offset from parent x,y pos
		hitbox.xoff = x
		hitbox.yoff = y
		
 	hitbox.x = hitbox.xoff+hitbox.parent.x
 	hitbox.y = hitbox.yoff+hitbox.parent.y
	end
	
	--coordinates of the hb edges
	hitbox.left = hitbox.x-(.5*hitbox.xlen)	
	hitbox.right = hitbox.x+(.5*hitbox.xlen)	
	hitbox.top = hitbox.y-(.5*hitbox.ylen)
	hitbox.bot = hitbox.y+(.5*hitbox.ylen)
	
	add(hitboxes, hitbox)
	return hitbox
end


function update_hitbox(hb)
	--track lifetime
	--lifetime based on duration
	if hb.duration > 0 then
		hb.duration -= 1
	--lifetime based on parent
	elseif hb.duration == -1 then
		if hb.parent.isalive == false then
			hb.duration = 0
		end
	else //hb.duration == 0
		hb.isalive = false
		del(hitboxes, hb)
	end
	
	
		
	--update mappos
	hb.mapposx, hb.mapposy = map_pos(hb.x,hb.y)
	if hb.parent != nil then
		hb.x = flr(hb.xoff+hb.parent.x)
 	hb.y = flr(hb.yoff+hb.parent.y)
		
		--coordinates of the hb edges
		hb.left = hb.x-(.5*hb.xlen)	
		hb.right = hb.x+(.5*hb.xlen)	
		hb.top = hb.y-(.5*hb.ylen)
		hb.bot = hb.y+(.5*hb.ylen)
	end
	
	--oncollision function
 for i,j in pairs(hitboxes) do
			//check for collision
			if j != hb and (hbcollision(hb,j)) then
				
				if hb.parent != nil then
					if not check_parent(hb,j) then 	
						//apply damage
						hb.parent.hp -= j.damage
						//apply knockback
						knockback(hb.parent,j.kbx,j.kby, j.kbduration)
					end
				end
				
				if hb.oncollision != nil then
					//run oncollision function
					hb.oncollision(hb, j)
				end
			end
	end
	
	if hb.onmapcollision != nil then
		--onmapcollision function
		hb.onmapcollision(hb)
	end

end

--visualize hitbox for debugging 
function draw_hitbox(hb)	
	if (player.mapposx == hb.mapposx and player.mapposy == hb.mapposy) then
		rect(hb.left%128,
							hb.top%128,
							hb.right%128,
							hb.bot%128, 8)
	end
end


--returns the map cell containing x,y
function map_cell(x,y)
	local mapx = (x-(x%8))/8
	local mapy = (y-(y%8))/8
	
	return mapx, mapy
end

--returns the map screen containing x,y
function map_pos(x,y)
	local mapx, mapy = map_cell(x,y)
	local mapposx = (mapx-(mapx%16)) / 16
	local mapposy = (mapy-(mapy%16)) / 16
	return mapposx, mapposy
end

--converts map_cell to map coords
function map_coord(mapx,mapy)
	return mapx*8, mapy*8
end

function contains(table, element)
  for key, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

function hbcollision(updhb, othhb)
 	local c1 = updhb.top <= othhb.bot
 	local c2 = updhb.bot >= othhb.top
 	local c3 = updhb.left <= othhb.right
 	local c4 = updhb.right >= othhb.left
		if (c1 and c2 and c3 and c4) then
	 	return true
		else 
	 	return false
		end
end

function add_object(x,y,
																				dx,dy,
																				duration,
																				hp,
																				parent,
																				isglobal,
																				sprite,
																				update,
																				draw)
	local obj = {}
	obj.x = x
	obj.y = y
	
	obj.dx = dx
	obj.dy = dy
	
	obj.mapposx, obj.mapposy = map_pos(x,y)
	obj.mapcellx, obj.mapcelly = map_cell(x,y)
	
	obj.sprite = sprite
	
	obj.duration = duration
	obj.hp = hp
	
	if parent != nil then
		obj.parent = parent
		obj.isglobal = isglobal
		
		obj.xoff = x
		obj.yoff = y
		
		obj.x = parent.x + obj.xoff
		obj.y = parent.y + obj.yoff
	end
	
	
	
	obj.update = update
	obj.draw = draw
	

	obj.isalive = true
	
	add(objectpool, obj)
	
	return obj
end

function set_movement_from_face(object,
																																input_face,
																																speed)
	if (input_face == 0 or input_face ==3 or input_face ==5) then
		object.x -= 8
		object.dx = -(speed)
	--right
 elseif (input_face ==2 or input_face ==4 or input_face ==7) then
		object.x += 8
		object.dx = speed
	else
		object.dx = 0
	end
	
	--up 
 if (input_face ==0 or input_face ==1 or input_face ==2) then
		object.y -= 8 
		object.dy = -(speed)
	--down
	elseif (input_face ==5 or input_face ==6 or input_face ==7) then
		object.y += 8
		object.dy = speed
	else
		object.dy = 0
	end																													
end


function check_parent(obj1, obj2)
	while obj1.parent != nil do
		local tobj2 = obj2
		while tobj2.parent != nil do
			if obj1.parent == tobj2.parent then
				return true
			end
			tobj2 = tobj2.parent
		end
		obj1 = obj1.parent
	end
	
	return false
end
-->8
-- arrows and bow
// this tab contains code for
// the arrows utilized in bow
// combat. if a "combat" tab
// is formalized later, this 
// code will be moved there.


function add_arrow(origin)
	local arrow = add_object(origin.x,origin.y,
																										0,0,
																										40,
																										1,
																										nil,
																										true,
																										39,
																										nil,
																										draw_arrow)
		
	//sets dx,dy
	set_movement_from_face(arrow,origin.face,2.002)
		
	if ((arrow.dx == 0) or (arrow.dy == 0)) then
		if arrow.dx == 0 then
			arrow.sprite = 39
		else
			arrow.sprite = 41
		end
	else 
	 arrow.sprite = 40
	end
	
	arrow.flipx = false
	arrow.flipy = false
	
	if player.face == 5 then
		arrow.flipy = true
	elseif (player.face == 7 or player.face == 6 or player.face == 4) then
		arrow.flipx = true
		arrow.flipy = true
	elseif player.face == 2 then
		arrow.flipx = true
	end
	
	if (arrow.sprite == 40) then
	 arrow.x = flr(arrow.x)+0.5
  arrow.y = flr(arrow.y)+0.5
	 arrow.dx*=.75
	 arrow.dy*=.75
	end
	
	arrow.hb = add_hitbox(1,4,4,3,3,-1, true, 80, 2*global_faces[player.face][1],2*global_faces[player.face][2],4,  arrow_oncollision, arrow_onmapcollision, arrow)
	
end


function draw_arrow(arrow)
	if (player.mapposx == arrow.mapposx and player.mapposy == arrow.mapposy) then
		spr(arrow.sprite,arrow.x%128,arrow.y%128,1.0,1.0,arrow.flipx,arrow.flipy)
 end
end


function arrow_oncollision(arrowhb, otherhb)
	
	if otherhb.issolid then
		arrowhb.parent.duration = 0
	end
	
	//add hb collision behavior here!
	if (otherhb.tag == 2 and otherhb.parent != nil ) then
		if arrowhb.parent.isalive == false then
		 otherhb.parent.duration = 0
		end
	end

	
end

function arrow_onmapcollision(arrowhb)
	//colliding with solid obj
	if ( 0 != #searchmapcols(arrowhb, 0b1, 0, 0, 0, 0)) then 
	 sfx(10)
	 //delete arrow on col
	 arrowhb.parent.duration = 0	 
	end
	
end
-->8
-- pathfinding
--mapcell navigation
function astar(startx,starty,
															goalx,goaly)
															
	if fget(mget(goalx,goaly), 0)  then
		print("impossible goal!!")
		return
	end
	
	local frontier = {}
	local start = {x=startx,y=starty}
	local goal = {x=goalx,y=goaly}
	insert(frontier, start, 0)
	
	came_from = {}
 came_from[vectoidx(start)] = start
 cost_so_far = {}
 cost_so_far[vectoidx(start)] = 0
 
 while (#frontier > 0 and #frontier < 1000) do
 	//current x,y point
 	local current = frontier[#frontier][1]
 	del(frontier,frontier[#frontier])
 	
  --get neighbors
  local neighbours = getneighbours(current)
  //print(#neighbours)
  for nxt in all(neighbours) do
  	//nxt is id
  	//nxtvec is x,y
  	local nxtvec = idxtovec(nxt)
  	
  	//display exploration (debug)	
  	//spr(10,(nxtvec.x*8)%128,(nxtvec.y*8)%128)
  
  	local newcost = cost_so_far[vectoidx(current)] + 1
  	
  	if (cost_so_far[nxt] == nil) or (newcost < cost_so_far[nxt]) then
  		cost_so_far[nxt] = newcost
    local priority = heuristic(goal, nxtvec) + newcost
    insert(frontier, nxtvec, priority)
    came_from[nxt] = current
  	end
  end
  
  //current == goal
 	if vectoidx(current) == vectoidx(goal) then
 		print("path found")
   break
  end
  
  //print(#frontier)
 end
	
	local current = came_from[vectoidx(goal)]
 path = {}
 
 if current == nil then
 	print("path not found!")
 	return
 end
 
 local cidx = vectoidx(current)
 local sidx = vectoidx(start)
 
 while cidx != sidx do
  add(path, current)
  current = came_from[cidx]
  cidx = vectoidx(current)
 end
 
 reverse(path)
 
 return path
end


function draw_path(path)
	for mapcell in all(path) do
		local mapposx, mapposy = map_pos(mapcell.x*8,mapcell.y*8)
		
		if mapposx == player.mapposx and mapposy == player.mapposy then
			spr(44, (mapcell.x*8)%128,(mapcell.y*8)%128)
		end	
	end
	
end



-- insert into table and sort by priority
function insert(t, val, p)
 if #t >= 1 then
  add(t, {})
  for i=(#t),2,-1 do
   
   local nxt = t[i-1]
   if p < nxt[2] then
    t[i] = {val, p}
    return
   else
    t[i] = nxt
   end
  end
  t[1] = {val, p}
 else
  add(t, {val, p}) 
 end
end



-- find all existing neighbours of a position that are not walls
function getneighbours(pos)
 local neighbours={}
 
 --left															//no solid
 if pos.x > 0 and not fget(mget(pos.x-1,pos.y), 0)  then
  add(neighbours,vectoidx({x=pos.x-1,y=pos.y}))
 end
 --right
 if pos.x < 1024 and not fget(mget(pos.x+1,pos.y), 0) then
  add(neighbours,vectoidx({x=pos.x+1,y=pos.y}))
 end
 --up
 if pos.y > 0 and not fget(mget(pos.x,pos.y-1), 0) then
  add(neighbours,vectoidx({x=pos.x,y=pos.y-1}))
 end
 --down
 if pos.y < 512 and not fget(mget(pos.x,pos.y+1), 0) then
  add(neighbours,vectoidx({x=pos.x,y=pos.y+1}))
 end

	//idk what this does
 -- for making diagonals
 if (pos.x+pos.y) % 2 == 0 then
  reverse(neighbours)
 end
 
 return neighbours
end


-- manhattan distance on a square grid
function heuristic(a, b)
	--[[
	local xsqr = abs(a.x - b.x)^2
	local ysqr = abs(a.y-b.y)^2
	
 return sqrt(xsqr+ysqr)
 --]]
 
 return (abs(a.x - b.x) + abs(a.y-b.y))

end


function reverse(t)
 for i=1,(#t/2) do
  local temp = t[i]
  local oppindex = #t-(i-1)
  t[i] = t[oppindex]
  t[oppindex] = temp
 end
end


//fuck my life
-- translate a 2d x,y coordinate to a binary idx
function vectoidx(vec)
	local x = flr(vec.x) >>> 11
	local y = flr(vec.y) --<< 11
	return x | y
end

function idxtovec(idx)
	local tx = (idx << 11) & 0b11111111111
 local ty = idx & 0b1111111111
 return {x=tx,y=ty}
end
__gfx__
00000000000000001111111111111111222222222ff7f22222ff2222222fff22222222222222222200000000222222222222222222222222222222222ff7f222
0000000000005500111cc11111111111222222222f7ff22222ff22222222fff22222222222222222000880002ff222222f62222222ffff22222222222ffff6f2
007007000005550011cccc1111111111ff22222222ffff2f222ff222222ff7f2222222ffff22222200888800222f7ff2226fff222fffcff22222fff222ff6ff2
0007700000056550117cc71111111111ffffffff2222ffff222ff222ffff7f2222222f7ffef222220078870022ff67f222ffffe2ff6feff222fffff222ffff22
000770000055d6501c0cc0c11111111122ffffff22222fff222ff222ff7ff2222222fff2ffff22220808808022f7cf2222fefff2ffeffff222fcff2222f6f222
007007000056dd501ccccc411111111122ff2222222222ff222ff22222f222222222f7f22f7622220888888022f7f22222fffff22fffff222ffef222222fef22
000000000055555011c1144111111111222222222222222222ff2222222222222222ff222f6ff2220080080022ff2222222fff22222222222fcff2222222ff22
000000000000000011c11c111111111122222222222222222ff7f22222222222222f7f222ffff222008008002222222222222ff22222222222ff222222222222
22222222880000cc000007805555555506000006cccccccc2ff7f222222222220000000000000000000000000000000000000000454444544544445445444454
22222222880000cc000070005007770560d06060cccccc6c2f7ff222222222220000000005455450054554500545545005455450555555555555555555555555
222222ffdd0000dd000770005070007506006d00cc6ccc7622ffff2f22fffff20444444045455454454554544545545445455454454444544566665445444454
fff22f7fdd0000dd005555005070000500d006d0cc76ccc7f22fefff2ffffeff50000005555aa555555aa555555aa555555aa5555555aa254566665445444454
f77ffff2dd0000dd051111505007700560000000cc676cccf6ff2fff2ffef6ff400aa004444aa444444aa444444aa444444aa4444544aa244566665445444454
2ffff7f2add00dda05111150570007050006d060ccc67cccfff222ff2ffcfff25445544554455445544554455445544554455445454444544566665445444454
222fff220dddddd00511115050777005600000006ccccccc6f22222222ffff225445544554455445544554455445544554455445555555555555555555555555
222f7f2200adda00005555005555555506d60060c6cccccc22222222222222225445544554455445544554455445544554455445454444544544445445444454
11111111111111111111111111111111111111111111111111111111000040000000000000000000005440000000000000000000000000000000000055555555
111cc111111cc111111cc111111cc111111cc111111cc111111cc111000444000440000000000000007004000000000000000000000000000000000050000005
11cccc1111cccc1111ccdc1111cdcc1111ccdc1111cccc1111cccc110000f00004f00000040000770070004006400000000bb000000000000000000050000005
1cc7cc7117cc7cc111ccdc7111cdcc1117ccdc111c7cc711117cc7c10000f000000f000044fffff0007000906446000000bbbb00000bb0000000000050000005
1cc0cc0110cc0cc11ccdcc011cdcccc110cdccc11c0cc0c11c0cc0c10000f0000000f0000400007700700040644466000b7bb7b00bbbbbb0000bb00050000005
1ccccc411cccc4c11ccdccc11cdcccc114cdccc11ccccc411ccccc410000f00000000f700000000000700040644444670bbbbbb0b7bbbb7b0bbbbbb050000005
11cc144111c1c41111c1cc1114c11c1114cc1c1111cc1c4111c1c4410007f700000007f70000000000700400644c4cc70bbbbbb0bbbbbbbbb7bbbb7b50000005
11c11c1111c11c1111c11c1111c11c1111c11c1111c11c1111c11c110007070000000070000000000054400007c7c77000bbbb0000bbbb000bbbbbb050000005
f544445f00000000000000000555d55000a660000222200000022222000222200222220000e007e00000000000000066000000005d5705d5bbbbbbbb45444454
55ffff550099990000999900555d555500700600002222000022222000222200000222200e3e73700444000000000676000bb00005d07d50bbbbbbbb55555555
f444444f0975579009999990555d55550070006000272700007272000072700000027270e3333337004460000000676000bbbb005d5705d5bbbbbbbb45444454
f444444f97755779999559995555d555007000a00320f030030f0230030f033000330f00073993700006640000067600007bb7005d5075d5bbbbbbbb52aa5555
f444444f977557799955559955555dd50070006003333330033333300333333000f333300e39933e004e3e40906760000bbbbbb005d70d50bbbbbbbb42aa4454
f444444f0975579009999990555dd55d007000600f3334f00f3334f00f3334f000f333400733333704439340099600000bbbbbb005d07d50bbbbbbbb45444454
55ffff55009999000099990055d55555007006000f5555f00f5555f00f5555f000055500733776e000433740059000000bbbbbb05d5705d5bbbbbbbb55555555
f544445f00000000000000000d55555000a660000050050000500500005005000005050007e00000000444005009000000bbbb0005d07d50bbbbbbbb45444454
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57000075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57700075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57070075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57007075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57000775000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57000075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
999930303030303030303030303030303030303030303030303030303030303080d0007140404001404040404040409030303030303030303030303030303030
0000000000303030303030303030303080d000714040900000404040404040903030303030303030303030303030303030303030303030303030303030303060
99999999303030303030303030303030303030303030303030303030303030306051510000101060000000000000006030303030303030303030303030303030
0000000000303030303030303030303060515100a110600000000000000000603030303030303030303030303030303030303030303030303030303030303060
99999990303030303030303030303030303030303030303030303030303030306051000000000060000000000000006030303030303030303030303030303000
00000000003030303030303030303030605100000000509000000000000000603030303030303030303030303030303030303030303030303030303030303060
99999990303030303030303030303030303030303030303030303030303030306000000093939360000000000000006030303030303030303030303030303030
00000000303030303030303030303030600000009393936000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030306000000093939360000000000000006030303030303030303030303030303030
30303030303030303030303030303030600000009393936000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030306000000093930060000000000000006030303030303030303030303030303030
30303030303030303030303030303030600000009393006000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030306010000000000060000000000000006030303030303030303030303030303030
30303030303030303030303030303030601000000000006000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030305040900000804070000000000000006030303030303030303030303030303030
30303030303030303030303030303030504090101080407000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030308040700000504090000000000000006030303030303030303030303030303030
30303030303030303030303030303030804070101050409000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030306000000000000060000000000000006030303030303030303030303030303030
30303030303030303030303030303030600000000000006000000000000000603030303030303030303030303030303030303030303030303030303030303060
603030303030303030303030303030303030303030303030303030303030303060000000000000f0000000000000006030303030303030303030303030303030
3030303030303030303030303030303060000000000000f041410000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030301000000000000010000000000000006030303030303030303030303030303030
30303030303030303030303030303030100000000000001041000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030300000000000000010000000000000006030303030303030303030303030303030
30303030303030303030303030303030000000000000414100000000000000603030303030303030303030303030303030303030303030303030303030303060
6030303030303030303030303030303030303030303030303030303030303030e0000000000000e0000000000000006030303030303030303030303030303030
30303030303030303030303030303030e0000000000000e000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030306000000000000060000000000000006030303030303030303030303030303030
30303030303030303030303030303030600000000000006000000000000000603030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030305040404090008070404040404040407030303030303030303030303030303030
30303030303030303030303030303030504040409000807040404040404040703030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
60303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304040404030
30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060
50404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040
40404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404070
__label__
66626222666262626662666222226662666266626662666226622662622222222222222222222222222222222222222222222222222222222222222222222222
62626222626262626222626222222622262262226662626262626262622222222222222222222222222222222222222222222222222222222222222222222222
666262ff6662666266f266222ff2262226f266226f6266626f6262626ff22222222222ff2ff222222ff222222ff222222ff222222ff222222ff22222222222ff
62226f7f6f6fff6f6fff6f6ffffff6fff6ff6fff6f6f6fff6f6f6f6f6ffffffffff22f7ffffffffffffffffffffffffffffffffffffffffffffffffffff22f7f
62226662626f666f666f6f6ff62f666ff62f666f626f6fff662f66ff666ffffff77ffff2f22ffffff22ffffff22ffffff22ffffff22ffffff22ffffff77ffff2
2222f7f2222ff222222ff222222ff222222ff222222ff222222ff222222ff2222ffff7f2222ff222222ff222222ff222222ff222222ff222222ff2222ffff7f2
6662ff2222222222222222222222222222222222222222222222222222222222222fff22222222222222222222222222222222222222222222222222222fff22
626f7f2222222222222222222222222222222222222222222222222222222222222f7f22222222222222222222222222222222222222222222222222222f7f22
626f22221111111111111111111111111111111111111111111111111111111122ff222211111111111111111111111111111111111111111111111122ff2222
626f22221111111111111111111111111111111111111111111111111111111122ff222211111111111111111111111111111111111155111111551122ff2222
666ff22211111111111111111111111111111111111111111111111111111111222ff222111111111111111111111111111111111115551111155511222ff222
222ff22211111111111111111111111111111111111111111111111111111111222ff222111111111111111111111111111111111115655111156551222ff222
666ff66266616661166111111111111111111111111111111111111111111111222ff222111111111111111111111111111111111155d6511155d651222ff222
626f626266616161611111111111111111111111111111111111111111111111222ff222111111111111111111111111111111111156dd511156dd51222ff222
66ff62626161661166611111111111111111111111111111111111111111111122ff222211111111111111111111111111111111115555511155555122ff2222
6f676262616161611161111111111111111111111111111111111111111111112ff7f2221111111111111111111111111111111111111111111111112ff7f222
666f66226161666166111111111111111111111111111111111111111111111122ff222211544111111111111111111111111111111111111111111122ff2222
22ff22221111111111111111111155111545545111111111111111111111111122ff222211711411111155111111111111111111111155111111111122ff2222
666ff22211111111111111111115551145455454111111111111111111111111222ff222117111411115551111111111111111111115551116411111222ff222
626ff222111111111111111111156551555aa555111111111111111111111111222ff222117111911115655111111111111111111115655164461111222ff222
626ff22211111111111111111155d651444aa444111111111111111111111111222ff222117111411155d65111111111111111111155d65164446611222ff222
626ff22211111111111111111156dd5154455445111111111111111111111111222ff222117111411156dd5111111111111111111156dd5164444467222ff222
666f22221111111111111111115555515445544511111111111111111111111122ff22221171141111555551111111111111111111555551644c4cc722ff2222
2ff7f222111111111111111111111111544554451111111111111111111111112ff7f222115441111111111111111111111111111111111117c7c7712ff7f222
626f6662616116611111111111111111111111111111111111111111111111112ff7f22222222222222222221111111111111111111111111111111122ff2222
626f6222616161111111111111111111111111111111551111111111111111112f7ff22222222222222222221111111111111111111111111111111122ff2222
662f66226661666111111111111111111111111111155511111111111111111122ffff2f2ff22222ff22222211111111111111111111111111111111222ff222
626f6222116111611111111111111111111111111115655111111111111111112222fffffffffffffef2222211111111111111111111111111111111222ff222
626f6662666166111111111111111111111111111155d651111111111111111122222ffff22fffffffff222211111111111111111111111111111111222ff222
222ff222111111111111111111111111111111111156dd511111111111111111222222ff222ff2222f76222211111111111111111111111111111111222ff222
666f22221111111111111111111111111111111111555551111111111111111122222222222222222f6ff2221111111111111111111111111111111122ff2222
6f67f2221111111111111111111111111111111111111111111111111111111122222222222222222ffff222111111111111111111111111111111112ff7f222
626f22221111111111111111111111111111111111111111111111111111111111111111111111112ff7f2222222222211111111111111111111111122ff2222
626f22221111111111115511111111111111111111111111111111111111111111111111111111112f7ff22222ffff2211111111111111111111111122ff2222
666ff22211111111111555111111111111111111111111111111111111111111111111111111111122ffff2f2fffcff2111111111111111111111111222ff222
222ff2221111111111156551111111111111111111111111111111111111111111111111111111112222ffffff6feff2111111111111111111111111222ff222
666f6662666116616165d6611111111111111111111111111111111111111111111111111111111122222fffffeffff2111111111111111111111111222ff222
626f62626161616161666d5111111111111111111111111111111111111111111111111111111111222222ff2fffff22111111111111111111111111222ff222
666f6622661161616165666111111111111111111111111111111111111111111111111111111111222222222222222211111111111111111111111122ff2222
6f67626261616161666111611111111111111111111111111111111111111111111111111111111122222222222222221111111111111111111111112ff7f222
626f626261616611666166111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112ff7f222
22ff222211111111111111111111111111111111111111111111111111115511111111111111111111115511111111111111111111111111111111112f7ff222
666ff222111111111111111111111111111111111111111111111111111555111111111111111111111555111111111111111111111111111111111122ffff2f
626ff22211111111111111111111111111111111111111111111111111156551111111111111111111156551111111111111111111111111111111112222ffff
626ff2221111111111111111111111111111111111111111111111111155d65111111111111111111155d6511111111111111111111111111111111122222fff
626ff2221111111111111111111111111111111111111111111111111156dd5111111111111111111156dd5111111111111111111111111111111111222222ff
666f2222111111111111111111111111111111111111111111111111115555511111111111111111115555511111111111111111111111111111111122222222
2ff7f222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111122222222
2ff7f222222222222222222222222222111111111111111111111111111111111111111111111111222222222222222222222222111111111111111111111111
2f7ff222222222222222222222222222111111111111111111111111111111111111111111111111222222222222222222222222111111111111111111111111
22ffff2f2ff222222ff22222ff222222111111111111111111111111111111111111111111111111222222ff2ff22222ff222222111111111111111111111111
2222fffffffffffffffffffffef2222211111111111111111111111111111111111111111111111122222f7ffffffffffef22222111111111111111111111111
22222ffff22ffffff22fffffffff22221111111111111111111111111111111111111111111111112222fff2f22fffffffff2222111111111111111111111111
222222ff222ff222222ff2222f7622221111111111111111111111111111111111111111111111112222f7f2222ff2222f762222111111111111111111111111
2222222222222222222222222f6ff2221111111111111111111111111111111111111111111111112222ff22222222222f6ff222111111111111111111111111
2222222222222222222222222ffff222111111111111111111111111111111111111111111111111222f7f22222222222ffff222111111111111111111111111
2222222222222222222222222ff7f222222222222222222211111111111111112222222222222222222fff2222222222222fff22111111111111111111111111
2ff222222f6222222f6222222f7ff2222222222222222222111111111111111122222222222222222222fff2222222222222fff2111111111111111111111111
222f7ff2226fff22226fff2222ffff2f2ff22222ff2222221111111111111111222222ff2ff22222222ff7f2222222ff222ff7f2111111111111111111111111
22ff67f222ffffe222ffffe22222fffffffffffffef22222111111111111111122222f7fffffffffffff7f2222222f7fffff7f22111111111111111111111111
22f7cf2222fefff222fefff222222ffff22fffffffff222211111111111111112222fff2f22fffffff7ff2222222fff2ff7ff222111111111111111111111111
22f7f22222fffff222fffff2222222ff222ff2222f76222211111111111111112222f7f2222ff22222f222222222f7f222f22222111111111111111111111111
22ff2222222fff22222fff2222222222222222222f6ff22211111111111111112222ff2222222222222222222222ff2222222222111111111111111111111111
2222222222222ff222222ff222222222222222222ffff2221111111111111111222f7f222222222222222222222f7f2222222222111111111111111111111111
2222222222222222222222222222222222222222222fff2211111111111111112ff7f2222222222222222222222fff2211111111111111111111111111111111
2f6222222ff222222222222222222222222222222222fff211111111111111112f7ff22222222222222222222222fff211111111111111111111111111111111
226fff22222f7ff2222222ff2ff222222ff22222222ff7f2111111111111111122ffff2f2ff222222ff22222222ff7f211111111111111111111111111111111
22ffffe222ff67f222222f7fffffffffffffffffffff7f2211111111111111112222ffffffffffffffffffffffff7f2211111111111111111111111111111111
22fefff222f7cf222222fff2f22ffffff22fffffff7ff222111111111111111122222ffff22ffffff22fffffff7ff22211111111111111111111111111111111
22fffff222f7f2222222f7f2222ff222222ff22222f222221111111111111111222222ff222ff222222ff22222f2222211111111111111111111111111111111
222fff2222ff22222222ff2222222222222222222222222211111111111111112222222222222222222222222222222211111111111111111111111111111111
22222ff222222222222f7f2222222222222222222222222211111111111111112222222222222222222222222222222211111111111111111111111111111111
2222222222222222222fff2211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111122222222
22222222222222222222fff211111111111111111111111111111111111111111111111111111111111111111111551111115511111155111111111122222222
222222ff2ff22222222ff7f2111111111111111111111111111111111111111111111111111111111111111111155511111555111115551111111111222222ff
22222f7fffffffffffff7f2211111111111111111111111111111111111111111111111111111111111111111115655111156551111565511111111122222f7f
2222fff2f22fffffff7ff22211111111111111111111111111111111111111111111111111111111111111111155d6511155d6511155d651111111112222fff2
2222f7f2222ff22222f2222211111111111111111111111111111111111111111111111111111111111111111156dd511156dd511156dd51111111112222f7f2
2222ff2222222222222222221111111111111111111111111111111111111111111111111111111111111111115555511155555111555551111111112222ff22
222f7f222222222222222222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111222f7f22
22ff2222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111122ff2222
22ff2222111111111111111111115511111111111111111111111111111111111111111111111111111111111111111111111111111155111111551122ff2222
222ff2221111111111111111111555111111111111111111111111111111111111111111111111111111111111111111111111111115551111155511222ff222
222ff2221111111111111111111565511111111111111111111111111111111111111111111111111111111111111111111111111115655111156551222ff222
222ff22211111111111111111155d6511111111111111111111111111111111111111111111111111111111111111111111111111155d6511155d651222ff222
222ff22211111111111111111156dd511111111111111111111111111111111111111111111111111111111111111111111111111156dd511156dd51222ff222
22ff2222111111111111111111555551111111111111111111111111111111111111111111111111111111111111111111111111115555511155555122ff2222
2ff7f22211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112ff7f222
22ff222211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112ff7f222
22ff2222111111111111111111115511111155111111111111111111111111111111111111cc111111111111111111111111111111111111111155112f7ff222
222ff22211111111111111111115551111155511111111111111111111111111111111111cccc111111111111111111111111111111111111115551122ffff2f
222ff2221111111111111111111565511115655111111111111111111111111111111111cc7cc71111111111111111111111111111111111111565512222ffff
222ff22211111111111111111155d6511155d65111111111111111111111111111111111cc0cc011111111111111111111111111111111111155d65122222fff
222ff22211111111111111111156dd511156dd5111111111111111111111111111111111ccccc411111111111111111111111111111111111156dd51222222ff
22ff222211111111111111111155555111555551111111111111111111111111111111111cc14411111111111111111111111111111111111155555122222222
2ff7f22211111111111111111111111111111111111111111111111111111111111111111c11c111111111111111111111111111111111111111111122222222
22ff2222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
22ff2222154554511111111111111111111155111111111111111111111111111111111111111111111111111111111111111111111111111111111111115511
222ff222454554541111111111111111111555111111111111111111111111111111111111111111111111111111111111111111111111111111111111155511
222ff222555aa5551111111111111111111565511111111111111111111111111111111111111111111111111111111111111111111111111111111111156551
222ff222444aa44411111111111111111155d651111111111111111111111111111111111111111111111111111111111111111111111111111111111155d651
222ff2225445544511111111111111111156dd51111111111111111111111111111111111111111111111111111111111111111111111111111111111156dd51
22ff2222544554451111111111111111115555511111111111111111111111111111111111111111111111111111111111111111111111111111111111555551
2ff7f222544554451111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
22ff2222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
22ff2222111111111111111111115511111111111111551111111111111111111111111111111111111111111111111111111111111111111111551111115511
222ff222111111111111111111155511111111111115551111111111111111111111111111111111111111111111111111111111111111111115551111155511
222ff222111111111111111111156551111111111115655111111111111111111111111111111111111111111111111111111111111111111115655111156551
222ff22211111111111111111155d651111111111155d65111111111111111111111111111111111111111111111111111111111111111111155d6511155d651
222ff22211111111111111111156dd51111111111156dd5111111111111111111111111111111111111111111111111111111111111111111156dd511156dd51
22ff2222111111111111111111555551111111111155555111111111111111111111111111111111111111111111111111111111111111111155555111555551
2ff7f222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
22ff2222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
22ff2222111111111111551111115511111111111111111111111111111111111111111111111111111111111111111111111111111111111111551111111111
222ff222111111111115551111155511111111111111111111111111111111111111111111111111111111111111111111111111111111111115551111111111
222ff222111111111115655111156551111111111111111111111111111111111111111111111111111111111111111111111111111111111115655111111111
222ff222111111111155d6511155d651111111111111111111111111111111111111111111111111111111111111111111111111111111111155d65111111111
222ff222111111111156dd511156dd51111111111111111111111111111111111111111111111111111111111111111111111111111111111156dd5111111111
22ff2222111111111155555111555551111111111111111111111111111111111111111111111111111111111111111111111111111111111155555111111111
2ff7f222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
2ff7f222222222222222222211111111111111112222222222222222222222222222222222222222222222222222222211111111111111111111111111111111
2f7ff222222222222222222211115511111155112222222222222222222222222222222222222222222222222222222211115511111155111111111111111111
22ffff2f2ff22222ff2222221115551111155511222222ff2ff222222ff222222ff222222ff222222ff22222ff22222211155511111555111111111111111111
2222fffffffffffffef22222111565511115655122222f7ffffffffffffffffffffffffffffffffffffffffffef2222211156551111565511111111111111111
22222ffff22fffffffff22221155d6511155d6512222fff2f22ffffff22ffffff22ffffff22ffffff22fffffffff22221155d6511155d6511111111111111111
222222ff222ff2222f7622221156dd511156dd512222f7f2222ff222222ff222222ff222222ff222222ff2222f7622221156dd511156dd511111111111111111
22222222222222222f6ff22211555551115555512222ff2222222222222222222222222222222222222222222f6ff22211555551115555511111111111111111
22222222222222222ffff2221111111111111111222f7f2222222222222222222222222222222222222222222ffff22211111111111111111111111111111111

__gff__
0003000001010101010101010101010101010001000101010123252931050101000000000000000000000101000000000100000901000000000001010000000501000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
08040404040404041004040404040410100404040404040404040404040404041f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f0404040404040404040404040404040408040404040404040404040404040409040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040409
06030303030303030603030303010106060303030303030303030303030303031f133e3e403e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303030303030303030303030306040303030303030303030303030303030303030303030303030303030303030303030303030304040403030303030306
0603030119031b1b062a010303012b06060103030303030303030303030303033e3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003151515030303030303030303030306030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
0603030303010303050409030303030606031a030809030303030101010103031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003151503031503030303030303030306030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
0603010303030303033a050d0303030606030804070f030303010303030301031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303150303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06030303030303010303030303030305160407030303030301030303030303011f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003031515030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
05040409030303030303080409030303030303030303030301030303030303011e3e3e3e3e3e3e3e3e3e3e3e3e3e3e1e0000000000000000000000000000000003031515030303390303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
0b0c0c05040903030804070807030303030303030303030301030303330303011e3e3e3e3e3e3e3e3e3e3e3e3e3e3e1e0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
0c0b0804040703030504040703030303030303030303030301030303030303011e3e3e3e3e3e3e3e3e3e3e3e3e3e3e1e0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
080407030303030303033b010303030810040d030303030303010303030301031e3e3e3e3e3e3e3e3e3e3e3e3e3e3e1e0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06110301030303030303030303030106060303030303030303030101010103031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06030301010303030303030300030105070303030303030303030303030303031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06190303010303030300000000030301030303030303030303030303030303031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06030303030303030300000000030001030303030303030303030303030303031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
06030103030303030300000000000003030303030303030303030303030303031f3e3e3e3e3e3e3e3e3e3e3e3e3e3e1f0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
05040903030804040404040901000303030303030303030303030303030303031f1f1f1f1e1f1f1d3f1f1f1e1f1f1f1f0000000000000000000000000000000003030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306
0804070303050404040404070303030303030303030303030303030303030303030303000303030303030303030303030303030303030303030303030303000303030303030303030303030303030303080404100404040404040404040404090000000000000000000000000000000003030303030303030303030303030306
0603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303061508071515000000000000011414060000000000000000000000000000000003030303030303030303030303030306
0603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060c06151515000000000000010000060000000000000000000000000000000003030303030303030303030303030306
060303030303030303030303030303030303030308040d0317040409030303030303031f1f1f1f1f1f1f0303030303030303030303030303030303030303030303030303030303030303030303030303061506151515000000000000000001060000000000000000000000000000000003030303030303030303030303030306
0603030303031f1e1f1e1f0303030303030303030601010101010106030303030303031f30303030301f0303030303030303030303030303030303030303030303030303030303030303030303030303061506151515000000000000000000060000000000000000000000000000000003030303030303030303030303030306
0603030303031f0319031f030303030303030303060101010101010f030303030303031f30303030301f0303030303030303030303030303030303030303030303030303030303030303030303030303050906151500000000000000000000060000000000000000000000000000000003030303030303030303030303030306
0603030303031f0303031f0303030303030303030f01010101010103030303030303031f30303030301f0303030303030303030303030303030303030303030303030303030303030303030303030303081607150000393939390000000000060000000000000000000000000000000003030303030303030303030303030306
0603030303031f1e1d1e1f030303030303030303030101013401010e030303030303031f30303030301f0303030303030303030303030303030303030303030303030303030303030303030303030303060000000000393939390000000000060000000000000000000000000000000003030303030303030303030303030306
06030303030303030303030303030303030303030e01010101010106030303030303031f1f1f2f1f1f1f0303030303030303030303030303030303030303030303030303030303030303030303030303060000000000393939390000000000060000000000000000000000000000000003030303030303030303030303030306
0603030303030303030303030303030303030303060101010101010603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060000000000393939390000000008070000000000000000000000000000000003030303030303030303030303030306
060303030303030303030303030303030303031b0504040d031704070303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306000e010000000000000000000816090000000000000000000000000000000003030303030303030303030303030306
060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010601010000000000000000060b060000000000000000000000000000000003030303030303030303030303030306
060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010601010000000000000000060e060000000000000000000000000000000003030303030303030303030303030306
060303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306010504040900000000000804070f060000000000000000000000000000000003030303030303030303030303030306
0603030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303060101010b0509000000000608170d060000000000000000000000000000000003030303030303030303030303030306
06030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030617040d0b0b0600000804070b0b0c060000000000000000000000000000000003030303030303030303030303030306
__sfx__
490104000d0000d00008000030000d0001f0001f0001d0001d0001d0001d0001d0001d0001d0001d000210001f000210001f000210002100021000210001f0001f0001f0001f0001f0001f0001f0001f00000000
150308003f6433f6303f6203361033610336151b0001b0001b0001b0001b0001b0001b0001b0001f0001f0001d0001f000220002200022000220001d0001d0001d0001d0001d0001d0001d0001d0000000000000
011800100700013000136001360007000130001360013000070001300013000130001360011000136001100007000000001460016600070000000014600166000700000000070001460014600146001460000000
011000100500011000116001360005000130001360011000050000000000000000001360011000136001100000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000001f0001f0001f0001f0001f0001f0001f0001f0001d0001d0001d0001d0001d0001d0001d0001d000210001f000210001f000210002300026000240002300023000230002300023000230002300023000
011000001d0001d0001d0001d0001d0001d0001d0001d0001b0001b0001b0001b0001b0001b0001b0001b0001f0001d0001b000180001d0001b00018000110002100021000210002100021000210002100021000
030700001064015640176301063017620136201761010610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
110700001364010640106301063010620106201061010610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
490c00000f655000000000000000000000000000000000001f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010c00002d6232d625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0103000027610276102a6202c6332e6551a0001a0001a0001a0001a0001a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011900002c624206152061314615206132061508035206152c645206452063520635206252062508615206152c623206152061320615206132061508035206152c62420615206152061508032080330803514135
9119000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c10000000181301b1301d1301f130
913200002012020120201202012020120201201b1201b1201d1201d1201d1201d1201d1201d1201b120191201b1201b1201b1201b120141201412014120141201612016120161201612011120111201112011120
4d190020080350a0350f035130351403500000070350803514000140350f0350a0350f0350000008030010300503205032050320503203035050320303205032050320303505035030350503005035080350a035
011900202c624206152062314615080432061520525206152c645206452063520635206252062508615206152c63320615206231461508023206151d525205250502520615206152061508623206000802514125
4d190020300352e0352c0352e0302c031290302703229032290352903514031140351403514035140351403111035110350c0350c0350f0350f0350a0350a0350c0350c035030350303505045050450504505045
4d190020080350a0320f0321303214035000000f0321303214035160321b0321f03420035200252002520022050310503205032050320303005030030340503003034050300a0350c0350f030140300f0350f035
011900202c6142061520613146150804320615205252061508033206252061420625206152061508615206150804320645080432c635080332062520615206150561320615206232061508613206150862314615
913200000812008122081220812008120081250a1350a1301d1311b1221d1221b1221b1201b1251d135161450812008122081220812014125161251b125201252212224122221222412222122201221d1221b122
91320000081331b6251b6151b61508133203311b6151b615051331b6251b6151b615051331d3311b6151b615081331b6251b6151b61508133203311b6151b615051331b6251b6151b615111300f1300c1300a130
9119002022135201351d135201301b1311d130181321b1321d1351d135381313813538135381353813538131351323813235135331003313235132331350a1003013233132301352e135301422e1422c14529145
91190000081331b6001b6251b6001b625203001b6251b600081331b6001b6251b615051331d3311b6251b615051331b6001b6251b6001b6251b6001b6152e10005133221001d3313a1001b625331001b6152e100
911900202013522132271322b1322c135001001b1321f1322013522132271322b1342c1352c1252c1152c1121d1311d1321d1321d1321b1301d1301b1341d1300f134111312213518135271312c130331353f135
991b00201f6101d6101a61018610186101761015610136101161010610106100e6100e6100c6100e6101061011610136111561017610186101a6101c6101d6101f61021610236102461026610286102861024610
313600002003520300000000000000000000001b035000001d03500000000000000000000000001b035190351b0321b0321b03500000140321403214035000001603516000160350000011035050000503500000
911b0020080350a0350f035130351403500000070350803514000140350f0350a0350f0350000008030010300503205032050320503203035050320303205032050320303505035030350503005035080350a035
911b0020080350a0350f0351303514035000000f0321303214035160351b0321f03220035207252072020720050310503205032050320303505032030320503203032050350a0350c0350f030140350f0350f035
651000001a0101a0101a0101a0101a0101a0101a0101a01018010180101801018010180101801018010180101c0101a0101c0101a0101c0101c0101c0101c0101a0101a0101a0101a0101a0101a0151a0151a015
651000001a0101a0101a0101a0101a0101a0101a0101a01018010180101801018010180101801518015180151c0101a0101c0101a0101c0101e010210101f0101e0101e0101e0101e0101e0101e0151e0151e015
65100000180101801018010180101801018010180101801016010160101601016010160101601016010160101a0101a010180101a0101d0101d0101d0101d0101b0101a015180101801018015180151801518015
65100000180101801018010180101801018010180101801016010160101601016010160101601516015160151a0101801016010110101d0101b01018010110112101421015210122101021015210152101521015
01100010020450e0251362513625020450e025136251a015020451300013000130000e6250c0350e6250c03513000000001460016600070000000014600166000700000000070001460014600146001460000000
01100010000450c0251162513625000450e025136250c025000450000000000000000e6250c0350e6250c03500000000000000000000000000000000000000000000000000000000000000000000000000000000
011800000e033139001c9001c9251c9250c8001c9251c9000e033139001c925000001c925081331c9251c9000e033139001c9001c9251c9250c8001c9251c9000e033139001c925000001c9250c8001c9251b400
4f18000002050020000000000050020500000000000000500205000000000000005002050000000000005050070500000000000050500705000000000000505007050000000000005050070501f4001d40005053
7f180000020520205202052020520205202052020520205202052030520205203052000520005504000080000905209052090520905209052090520905209052090520a052090520a05207052070550600002053
1b1800000e0320e0320e0320e0320e0320e0320e0320e0320e0320f0320e0320f0320c0320c03521112211122111221112211222112221132211452114521155261352413526131271311e1351f1351b1351b135
031800001a1351b1001d100181351a1351810018100181351a1351a1251a115181301a135181251a1351d1321f13535400374001d1321f135294002b4001d1321f1351f1251f1151d1301f1351d1321f13222135
4f180000020520205202052020520205202052020520205202052030520205203052000520005503015070250905209052090520905209052090520905209052090520a052090520a05207052070550502503015
4f180000020500e0451a04500050020500e0451a0450005002050020250202500050020500000000000050500705000000000000505007050130251f025050500705000000000000505007050354353743535435
031800001a1351a1153e115181351a1353c1153e115181351a1351a1151a115181301a135181351a1351d1321f13535435374351d1321f135294252b4351d1321f1351f1151f115351303713535132371323a135
1f180000324251b4001d4003043132435184001840030435324353243532435304303243530435324353543237435354353743535432374353543537435354323743537435374353543037435294322b4322e435
1f180000264353c7152d43524335263353c7142433029330263303971529335397152633024335263352e3352b3453772526340293452b3453a73237722293402b1452b1352b125291452b3453a7323772213043
4f1800000205500055020550005502055000000005409050070550505507055050550005502050020450e00009055070520905207055090550c0551f000070540905507055090550c05507055090550505507055
2718000026132001002d132291322613224132211322413226132001002d132291322613200100291322613221132001002813224132211321f13221132241322d1352d1352b1352b135281322d1322413228132
4f1800000205500055020550005502055000000005409050070550505507055050550005502050020450e00009055070520905207055090550c0551f000070540905507055040550005509055050550705509055
2718000026332003002d332293322633200300213322433226332243322d332293322633229332293322633221332003002833224332213321f3322133224332283322433228332303322d332293322b33228333
27180000263322613226332261322633226332263322633226332273322633227332243322433524335213332133221132213322113221332213322133221332213322232221322223221f5521c5521855226553
3b1800001a5521a5521a5521a5521a5521a5521a5521a5521a5521b5521a5521b55218552185551852515553155522135215552213521555215552155521555215552165521555216552135551f3551f3251f325
2524000018052180521805218052160521605216052160521b0521b0521b0521b0521905219052190521905218051180521805218052170511705217052170521605116052160521605313055130551305513055
25240000110511105011050110551d0552905535055110551105011050110501105511055110501105511055140511405214052140531405514055140551405513051130521f0502b05013055130551305513055
190900201c9251c9001c9251c9001c925000001c900000001c9250000000000000001c9250000000000000000e0330000000000000000e0330000000000000001c925000001c925000001c925000000000000000
2112002029552275522955229551355523555535555355553555500000355550000033552275003355500000295522b552295522b5522e5522e5552e5552e5552b552295522b5522b5522b5552b5552955529555
002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
602000001880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
01 1c204344
00 1d204344
00 1e214344
02 211f4344
00 0b0c4344
01 0d0e0f44
00 0d110f44
00 170e0f44
00 11161744
00 10121344
02 10141544
01 18191a44
02 18191b44
00 22234344
00 22234344
00 22244b44
00 22242544
01 22232644
00 22232944
00 22282a44
00 22282b44
00 222c2d44
00 222e2f44
00 22243044
02 22243144
01 32424344
00 33344344
00 32344344
00 33343544
00 32364344
00 33344344
00 32344344
00 33344344
00 32346644
02 33346944
00 62647144
00 62647144

